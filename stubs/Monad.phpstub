<?php

declare(strict_types=1);

namespace FunctionalPHP\FantasyLand;

/**
 * @template T
 * @template-extends Applicative<T>
 * @template-extends Chain<T>
 */
interface Monad extends
    Applicative,
    Chain
{
    /**
     * bind :: Monad m => m a ~> (a -> m b) -> m b
     *
     * @template U of Monad
     * @param callable(T): U $function
     * @return U
     */
    public function bind(callable $function);

    /**
     * @template U
     * @param Monad<U> $applicative
     * @return Monad<mixed>
     */
    public function ap(Apply $applicative): Apply;

    /**
     * map :: Monad f => f a ~> (a -> b) -> f b
     *
     * @template U
     * @param callable(T): U $function
     * @return Monad<U>
     */
    public function map(callable $function): Functor;

    /**
     * Put $value in default minimal context.
     *
     * @template U
     * @param U $value
     * @return Monad<U>
     */
    public static function of($value);
}
