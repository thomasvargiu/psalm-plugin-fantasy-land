<?php

namespace FunctionalPHP\FantasyLand\Useful;

use FunctionalPHP\FantasyLand;
use FunctionalPHP\FantasyLand\Functor;

/**
 * @template T
 * @template-implements FantasyLand\Monad<T>
 */
class Identity implements FantasyLand\Monad
{
    const of = 'FunctionalPHP\FantasyLand\Useful\Identity::of';

    /**
     * @var T
     */
    private $value;

    /**
     * @template U
     * @param U $value
     * @return Identity<U>
     */
    public static function of($value)
    {
    }

    /**
     * @param T $value
     */
    private function __construct($value)
    {
    }

    /**
     * @template F
     * @param callable(T): F $function
     * @return Identity<F>
     */
    public function map(callable $function): FantasyLand\Functor
    {
    }

    /**
     * @template U
     * @param FantasyLand\Apply<U> $applicative
     * @return (T is callable ? Identity<U> : never-return)
     */
    public function ap(FantasyLand\Apply $applicative): FantasyLand\Apply
    {
    }

    /**
     * @template U of Chain
     * @param callable(T): U $function
     * @return U
     */
    public function bind(callable $transformation)
    {
    }
}
